#!/usr/bin/env python3

# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'onOff.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
from PyQt5.QtWidgets import QApplication , QMainWindow , QPushButton , QWidget, QMdiSubWindow
from PyQt5 import QtGui
from PyQt5.QtWidgets import QApplication, QDialog,QTabWidget, QComboBox, QCheckBox ,QGroupBox ,QVBoxLayout, QWidget, QLabel, QLineEdit, QDialogButtonBox
import sys
from PyQt5.QtGui import QIcon
from PyQt5.QtCore import pyqtSlot, QTimer
import time
from PyQt5 import uic
from PyQt5.QtWidgets import QListView, QApplication, QWidget, QVBoxLayout
from PyQt5.QtGui import QStandardItemModel, QStandardItem
from PyQt5.QtCore import QModelIndex
import sys
from PyQt5.QtCore  import *
from PyQt5 import QtWidgets, QtGui
from PyQt5 import *
from PyQt5.QtCore import pyqtSlot, QTimer
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5 import uic
from PyQt5.QtWidgets import QListView, QApplication, QWidget, QVBoxLayout
from PyQt5.QtGui import QStandardItemModel, QStandardItem
from PyQt5.QtCore import QModelIndex
import time
import pickle
import json
import os
import subprocess

import os.path
from pynput.keyboard import Key, Controller
keyboard = Controller()
import os.path
from pynput.keyboard import Key, Controller
keyboard = Controller()

import PhoneDataExport 
import CallHistoryDownload

script_location = os.getcwd()

user_login = os.getlogin()
from PyQt5 import QtCore, QtGui, QtWidgets
status_old ="" 
path = ""
status = ""

class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(854, 467)
    #    Form.setMaximumSize(QtCore.QSize(600, 450))
        Form.setStyleSheet("background-color: rgb(0, 0, 0);")
        icon_size = QSize(24, 24)
        self.gridLayout_2 = QtWidgets.QGridLayout(Form)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.Main_layout = QtWidgets.QGridLayout()
        self.Main_layout.setObjectName("Main_layout")
        self.Setting_button_layout = QtWidgets.QHBoxLayout()
        self.Setting_button_layout.setObjectName("Setting_button_layout")
        self.Setting_button = QtWidgets.QPushButton(Form)
        self.Setting_button.setObjectName("Setting_button")
        self.Setting_button.setMinimumSize(QtCore.QSize(90, 20))
        self.Setting_button_layout.addWidget(self.Setting_button)
        self.Setting_button.setStyleSheet("QPushButton { \n"
"    font: 12pt \"Ubuntu\";\n"
"    color: rgb(0, 0, 0);\n"
"    background-color: rgba(255, 255, 255, 255);\n"
"border: 1px;\n"
"border-radius: 5px}\n"
"QPushButton:focuspressed {background-color: rgba(255, 255, 255, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"color:black;\n"
"border: 0px; }\n"
" QPushButton:pressed {background-color: rgba(150, 150, 150, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"color:black;\n"
"border: 0px; }")
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.Setting_button_layout.addItem(spacerItem)
        self.Main_layout.addLayout(self.Setting_button_layout, 0, 0, 1, 1)
        
        
   # keyboard start ----------------------------------------------------------------
   
   
        self.Keyboard_layout = QtWidgets.QGridLayout()
        self.Keyboard_layout.setContentsMargins(-1, 0, -1, -1)
        self.Keyboard_layout.setObjectName("Keyboard_layout")
        self.b = QtWidgets.QPushButton(Form)
        self.b.setMinimumSize(QtCore.QSize(40, 40))
        self.b.setStyleSheet("QPushButton { background-color: rgba(255, 255, 255, 255);\n"
"font: 12pt \"Ubuntu\";\n"
"border: 1px;\n"
"border-radius: 5px}\n"
"QPushButton:focuspressed {background-color: rgba(255, 255, 255, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }\n"
" QPushButton:pressed {background-color: rgba(150, 150, 150, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }")
        self.b.setObjectName("b")
        self.b.clicked.connect(self.send_key_b)
        
        
        self.Keyboard_layout.addWidget(self.b, 3, 5, 1, 1)
        self.k_1 = QtWidgets.QPushButton(Form)
        self.k_1.setMinimumSize(QtCore.QSize(40, 40))
        self.k_1.setSizeIncrement(QtCore.QSize(0, 0))
        self.k_1.setStyleSheet("QPushButton { background-color: rgba(255, 255, 255, 255);\n"
"font: 12pt \"Ubuntu\";\n"
"border: 1px;\n"
"border-radius: 5px}\n"
"QPushButton:focuspressed {background-color: rgba(255, 255, 255, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }\n"
" QPushButton:pressed {background-color: rgba(150, 150, 150, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }")
        self.k_1.setObjectName("k_1")
        self.Keyboard_layout.addWidget(self.k_1, 0, 0, 1, 1)
        self.k_1.clicked.connect(self.send_key_1)        
        
        self.j = QtWidgets.QPushButton(Form)
        self.j.setMinimumSize(QtCore.QSize(40, 40))
        self.j.setStyleSheet("QPushButton { background-color: rgba(255, 255, 255, 255);\n"
"font: 12pt \"Ubuntu\";\n"
"border: 1px;\n"
"border-radius: 5px}\n"
"QPushButton:focuspressed {background-color: rgba(255, 255, 255, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }\n"
" QPushButton:pressed {background-color: rgba(150, 150, 150, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }")
        self.j.setObjectName("j")
        self.Keyboard_layout.addWidget(self.j, 2, 6, 1, 1)
        self.j.clicked.connect(self.send_key_j)
        
        
        self.k_7 = QtWidgets.QPushButton(Form)
        self.k_7.setMinimumSize(QtCore.QSize(40, 40))
        self.k_7.setStyleSheet("QPushButton { background-color: rgba(255, 255, 255, 255);\n"
"font: 12pt \"Ubuntu\";\n"
"border: 1px;\n"
"border-radius: 5px}\n"
"QPushButton:focuspressed {background-color: rgba(255, 255, 255, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }\n"
" QPushButton:pressed {background-color: rgba(150, 150, 150, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }")
        self.k_7.setObjectName("k_7")
        self.Keyboard_layout.addWidget(self.k_7, 0, 6, 1, 1)
        self.k_7.clicked.connect(self.send_key_7)
        
        self.o = QtWidgets.QPushButton(Form)
        self.o.setMinimumSize(QtCore.QSize(40, 40))
        self.o.setStyleSheet("QPushButton { background-color: rgba(255, 255, 255, 255);\n"
"font: 12pt \"Ubuntu\";\n"
"border: 1px;\n"
"border-radius: 5px}\n"
"QPushButton:focuspressed {background-color: rgba(255, 255, 255, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }\n"
" QPushButton:pressed {background-color: rgba(150, 150, 150, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }")
        self.o.setObjectName("o")
        self.Keyboard_layout.addWidget(self.o, 1, 8, 1, 1)
        self.o.clicked.connect(self.send_key_o)
        
        
        self.q = QtWidgets.QPushButton(Form)
        self.q.setMinimumSize(QtCore.QSize(40, 40))
        self.q.setStyleSheet("QPushButton { background-color: rgba(255, 255, 255, 255);\n"
"font: 12pt \"Ubuntu\";\n"
"border: 1px;\n"
"border-radius: 5px}\n"
"QPushButton:focuspressed {background-color: rgba(255, 255, 255, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }\n"
" QPushButton:pressed {background-color: rgba(150, 150, 150, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }")
        self.q.setObjectName("q")
        self.Keyboard_layout.addWidget(self.q, 1, 0, 1, 1)
        self.q.clicked.connect(self.send_key_q)
        
        
        self.x = QtWidgets.QPushButton(Form)
        self.x.setMinimumSize(QtCore.QSize(40, 40))
        self.x.setStyleSheet("QPushButton { background-color: rgba(255, 255, 255, 255);\n"
"font: 12pt \"Ubuntu\";\n"
"border: 1px;\n"
"border-radius: 5px}\n"
"QPushButton:focuspressed {background-color: rgba(255, 255, 255, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }\n"
" QPushButton:pressed {background-color: rgba(150, 150, 150, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }")
        self.x.setObjectName("x")
        self.x.clicked.connect(self.send_key_x)
        
        
        self.Keyboard_layout.addWidget(self.x, 3, 2, 1, 1)
        self.s = QtWidgets.QPushButton(Form)
        self.s.setMinimumSize(QtCore.QSize(40, 40))
        self.s.setStyleSheet("QPushButton { background-color: rgba(255, 255, 255, 255);\n"
"font: 12pt \"Ubuntu\";\n"
"border: 1px;\n"
"border-radius: 5px}\n"
"QPushButton:focuspressed {background-color: rgba(255, 255, 255, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }\n"
" QPushButton:pressed {background-color: rgba(150, 150, 150, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }")
        self.s.setObjectName("s")
        self.s.clicked.connect(self.send_key_s)
        
        self.Keyboard_layout.addWidget(self.s, 2, 1, 1, 1)
        self.pushButton_28 = QtWidgets.QPushButton(Form)
        self.pushButton_28.setMinimumSize(QtCore.QSize(40, 40))
        self.pushButton_28.setText("")
        self.pushButton_28.setFlat(True)
        self.pushButton_28.setObjectName("pushButton_28")
        self.Keyboard_layout.addWidget(self.pushButton_28, 2, 9, 1, 1)
        
        
        self.k_2 = QtWidgets.QPushButton(Form)
        self.k_2.setMinimumSize(QtCore.QSize(40, 40))
        self.k_2.setStyleSheet("QPushButton { background-color: rgba(255, 255, 255, 255);\n"
"font: 12pt \"Ubuntu\";\n"
"border: 1px;\n"
"border-radius: 5px}\n"
"QPushButton:focuspressed {background-color: rgba(255, 255, 255, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }\n"
" QPushButton:pressed {background-color: rgba(150, 150, 150, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }")
        self.k_2.setObjectName("k_2")
        self.k_2.clicked.connect(self.send_key_2)
        
        self.Keyboard_layout.addWidget(self.k_2, 0, 1, 1, 1)
        self.u = QtWidgets.QPushButton(Form)
        self.u.setMinimumSize(QtCore.QSize(40, 40))
        self.u.setStyleSheet("QPushButton { background-color: rgba(255, 255, 255, 255);\n"
"font: 12pt \"Ubuntu\";\n"
"border: 1px;\n"
"border-radius: 5px}\n"
"QPushButton:focuspressed {background-color: rgba(255, 255, 255, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 10pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }\n"
" QPushButton:pressed {background-color: rgba(150, 150, 150, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }")
        self.u.setObjectName("u")
        self.Keyboard_layout.addWidget(self.u, 1, 6, 1, 1)
        self.u.clicked.connect(self.send_key_u)
        
        self.e = QtWidgets.QPushButton(Form)
        self.e.setMinimumSize(QtCore.QSize(40, 40))
        self.e.setStyleSheet("QPushButton { background-color: rgba(255, 255, 255, 255);\n"
"font: 12pt \"Ubuntu\";\n"
"border: 1px;\n"
"border-radius: 5px}\n"
"QPushButton:focuspressed {background-color: rgba(255, 255, 255, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }\n"
" QPushButton:pressed {background-color: rgba(150, 150, 150, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }")
        self.e.setObjectName("e")
        self.Keyboard_layout.addWidget(self.e, 1, 2, 1, 1)
        self.e.clicked.connect(self.send_key_e)
        
        self.k_4 = QtWidgets.QPushButton(Form)
        self.k_4.setMinimumSize(QtCore.QSize(40, 40))
        self.k_4.setStyleSheet("QPushButton { background-color: rgba(255, 255, 255, 255);\n"
"font: 12pt \"Ubuntu\";\n"
"border: 1px;\n"
"border-radius: 5px}\n"
"QPushButton:focuspressed {background-color: rgba(255, 255, 255, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }\n"
" QPushButton:pressed {background-color: rgba(150, 150, 150, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }")
        self.k_4.setObjectName("k_4")
        self.Keyboard_layout.addWidget(self.k_4, 0, 3, 1, 1)
        self.k_4.clicked.connect(self.send_key_4)
        
        self.v = QtWidgets.QPushButton(Form)
        self.v.setMinimumSize(QtCore.QSize(40, 40))
        self.v.setStyleSheet("QPushButton { background-color: rgba(255, 255, 255, 255);\n"
"font: 12pt \"Ubuntu\";\n"
"border: 1px;\n"
"border-radius: 5px}\n"
"QPushButton:focuspressed {background-color: rgba(255, 255, 255, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }\n"
" QPushButton:pressed {background-color: rgba(150, 150, 150, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }")
        self.v.setObjectName("v")
        self.Keyboard_layout.addWidget(self.v, 3, 4, 1, 1)
        self.v.clicked.connect(self.send_key_v)

        self.k_0 = QtWidgets.QPushButton(Form)
        self.k_0.setMinimumSize(QtCore.QSize(40, 40))
        self.k_0.setStyleSheet("QPushButton { background-color: rgba(255, 255, 255, 255);\n"
"font: 12pt \"Ubuntu\";\n"
"border: 1px;\n"
"border-radius: 5px}\n"
"QPushButton:focuspressed {background-color: rgba(255, 255, 255, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }\n"
" QPushButton:pressed {background-color: rgba(150, 150, 150, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }")
        self.k_0.setObjectName("k_0")
        self.Keyboard_layout.addWidget(self.k_0, 0, 9, 1, 1)
        self.k_0.clicked.connect(self.send_key_0)
        
        self.k_8 = QtWidgets.QPushButton(Form)
        self.k_8.setMinimumSize(QtCore.QSize(40, 40))
        self.k_8.setStyleSheet("QPushButton { background-color: rgba(255, 255, 255, 255);\n"
"font: 12pt \"Ubuntu\";\n"
"border: 1px;\n"
"border-radius: 5px}\n"
"QPushButton:focuspressed {background-color: rgba(255, 255, 255, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }\n"
" QPushButton:pressed {background-color: rgba(150, 150, 150, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }")
        self.k_8.setObjectName("k_8")
        self.Keyboard_layout.addWidget(self.k_8, 0, 7, 1, 1)
        self.k_8.clicked.connect(self.send_key_8)
        
        self.r = QtWidgets.QPushButton(Form)
        self.r.setMinimumSize(QtCore.QSize(40, 40))
        self.r.setStyleSheet("QPushButton { background-color: rgba(255, 255, 255, 255);\n"
"font: 12pt \"Ubuntu\";\n"
"border: 1px;\n"
"border-radius: 5px}\n"
"QPushButton:focuspressed {background-color: rgba(255, 255, 255, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }\n"
" QPushButton:pressed {background-color: rgba(150, 150, 150, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }")
        self.r.setObjectName("r")
        self.Keyboard_layout.addWidget(self.r, 1, 3, 1, 1)
        self.r.clicked.connect(self.send_key_r)
        
        self.y = QtWidgets.QPushButton(Form)
        self.y.setMinimumSize(QtCore.QSize(40, 40))
        self.y.setStyleSheet("QPushButton { background-color: rgba(255, 255, 255, 255);\n"
"font: 12pt \"Ubuntu\";\n"
"border: 1px;\n"
"border-radius: 5px}\n"
"QPushButton:focuspressed {background-color: rgba(255, 255, 255, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }\n"
" QPushButton:pressed {background-color: rgba(150, 150, 150, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }")
        self.y.setObjectName("y")
        self.Keyboard_layout.addWidget(self.y, 1, 5, 1, 1)
        self.y.clicked.connect(self.send_key_y)
        
        self.pushButton_21 = QtWidgets.QPushButton(Form)
        self.pushButton_21.setText("")
        self.pushButton_21.setFlat(True)
        self.pushButton_21.setObjectName("pushButton_21")
        self.Keyboard_layout.addWidget(self.pushButton_21, 3, 0, 1, 1)
        
        self.m = QtWidgets.QPushButton(Form)
        self.m.setMinimumSize(QtCore.QSize(40, 40))
        self.m.setStyleSheet("QPushButton { background-color: rgba(255, 255, 255, 255);\n"
"font: 12pt \"Ubuntu\";\n"
"border: 1px;\n"
"border-radius: 5px}\n"
"QPushButton:focuspressed {background-color: rgba(255, 255, 255, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }\n"
" QPushButton:pressed {background-color: rgba(150, 150, 150, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }")
        self.m.setObjectName("m")
        self.Keyboard_layout.addWidget(self.m, 3, 7, 1, 1)
        self.m.clicked.connect(self.send_key_m)
        
        self.i = QtWidgets.QPushButton(Form)
        self.i.setMinimumSize(QtCore.QSize(40, 40))
        self.i.setStyleSheet("QPushButton { background-color: rgba(255, 255, 255, 255);\n"
"font: 12pt \"Ubuntu\";\n"
"border: 1px;\n"
"border-radius: 5px}\n"
"QPushButton:focuspressed {background-color: rgba(255, 255, 255, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }\n"
" QPushButton:pressed {background-color: rgba(150, 150, 150, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }")
        self.i.setObjectName("i")
        self.Keyboard_layout.addWidget(self.i, 1, 7, 1, 1)
        self.i.clicked.connect(self.send_key_i)
        
        self.k_9 = QtWidgets.QPushButton(Form)
        self.k_9.setMinimumSize(QtCore.QSize(40, 40))
        self.k_9.setStyleSheet("QPushButton { background-color: rgba(255, 255, 255, 255);\n"
"font: 12pt \"Ubuntu\";\n"
"border: 1px;\n"
"border-radius: 5px}\n"
"QPushButton:focuspressed {background-color: rgba(255, 255, 255, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }\n"
" QPushButton:pressed {background-color: rgba(150, 150, 150, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }")
        self.k_9.setObjectName("k_9")
        self.Keyboard_layout.addWidget(self.k_9, 0, 8, 1, 1)
        self.k_9.clicked.connect(self.send_key_9)
        
        self.pushButton_30 = QtWidgets.QPushButton(Form)
        self.pushButton_30.setText("")
        self.pushButton_30.setFlat(True)
        self.pushButton_30.setObjectName("pushButton_30")
        self.Keyboard_layout.addWidget(self.pushButton_30, 1, 10, 1, 1)
        
        self.h = QtWidgets.QPushButton(Form)
        self.h.setMinimumSize(QtCore.QSize(40, 40))
        self.h.setStyleSheet("QPushButton { background-color: rgba(255, 255, 255, 255);\n"
"font: 12pt \"Ubuntu\";\n"
"border: 1px;\n"
"border-radius: 5px}\n"
"QPushButton:focuspressed {background-color: rgba(255, 255, 255, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }\n"
" QPushButton:pressed {background-color: rgba(150, 150, 150, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }")
        self.h.setObjectName("h")
        self.Keyboard_layout.addWidget(self.h, 2, 5, 1, 1)
        self.h.clicked.connect(self.send_key_h)
        
        self.w = QtWidgets.QPushButton(Form)
        self.w.setMinimumSize(QtCore.QSize(40, 40))
        self.w.setStyleSheet("QPushButton { background-color: rgba(255, 255, 255, 255);\n"
"font: 12pt \"Ubuntu\";\n"
"border: 1px;\n"
"border-radius: 5px}\n"
"QPushButton:focuspressed {background-color: rgba(255, 255, 255, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }\n"
" QPushButton:pressed {background-color: rgba(150, 150, 150, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }")
        self.w.setObjectName("w")
        self.Keyboard_layout.addWidget(self.w, 1, 1, 1, 1)
        self.w.clicked.connect(self.send_key_w)
        
        self.t = QtWidgets.QPushButton(Form)
        self.t.setMinimumSize(QtCore.QSize(40, 40))
        self.t.setStyleSheet("QPushButton { background-color: rgba(255, 255, 255, 255);\n"
"font: 12pt \"Ubuntu\";\n"
"border: 1px;\n"
"border-radius: 5px}\n"
"QPushButton:focuspressed {background-color: rgba(255, 255, 255, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }\n"
" QPushButton:pressed {background-color: rgba(150, 150, 150, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }")
        self.t.setObjectName("t")
        self.Keyboard_layout.addWidget(self.t, 1, 4, 1, 1)
        self.t.clicked.connect(self.send_key_t)
        
        self.c = QtWidgets.QPushButton(Form)
        self.c.setMinimumSize(QtCore.QSize(40, 40))
        self.c.setStyleSheet("QPushButton { background-color: rgba(255, 255, 255, 255);\n"
"font: 12pt \"Ubuntu\";\n"
"border: 1px;\n"
"border-radius: 5px}\n"
"QPushButton:focuspressed {background-color: rgba(255, 255, 255, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }\n"
" QPushButton:pressed {background-color: rgba(150, 150, 150, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }")
        self.c.setObjectName("c")
        self.Keyboard_layout.addWidget(self.c, 3, 3, 1, 1)
        self.c.clicked.connect(self.send_key_c)
        
        self.k = QtWidgets.QPushButton(Form)
        self.k.setMinimumSize(QtCore.QSize(40, 40))
        self.k.setStyleSheet("QPushButton { background-color: rgba(255, 255, 255, 255);\n"
"font: 12pt \"Ubuntu\";\n"
"border: 1px;\n"
"border-radius: 5px}\n"
"QPushButton:focuspressed {background-color: rgba(255, 255, 255, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }\n"
" QPushButton:pressed {background-color: rgba(150, 150, 150, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }")
        self.k.setObjectName("k")
        self.Keyboard_layout.addWidget(self.k, 2, 7, 1, 1)
        self.k.clicked.connect(self.send_key_k)
        
        self.hide = QtWidgets.QPushButton(Form)
        self.hide.setMinimumSize(QtCore.QSize(40, 40))
        self.hide.setStyleSheet("QPushButton { background-color: rgba(255, 255, 255, 255);\n"
"font: 12pt \"Ubuntu\";\n"
"border: 1px;\n"
"border-radius: 5px}\n"
"QPushButton:focuspressed {background-color: rgba(255, 255, 255, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }\n"
" QPushButton:pressed {background-color: rgba(150, 150, 150, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }")
        self.hide.setObjectName("hide")
        self.Keyboard_layout.addWidget(self.hide, 3, 10, 1, 1)
        self.hide.clicked.connect(self.send_key_hide)
        
        self.space = QtWidgets.QPushButton(Form)
        self.space.setMinimumSize(QtCore.QSize(40, 40))
        self.space.setText("Space")
        self.space.setFlat(True)
        self.space.setObjectName("pushButton_8")
        self.Keyboard_layout.addWidget(self.space, 3, 8, 1, 2)
        self.space.clicked.connect(self.send_key_space)
        self.space.setStyleSheet("QPushButton { background-color: rgba(255, 255, 255, 255);\n"
"font: 12pt \"Ubuntu\";\n"
"border: 1px;\n"
"border-radius: 5px}\n"
"QPushButton:focuspressed {background-color: rgba(255, 255, 255, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }\n"
" QPushButton:pressed {background-color: rgba(150, 150, 150, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }")

        
        self.k_5 = QtWidgets.QPushButton(Form)
        self.k_5.setMinimumSize(QtCore.QSize(40, 40))
        self.k_5.setStyleSheet("QPushButton { background-color: rgba(255, 255, 255, 255);\n"
"font: 12pt \"Ubuntu\";\n"
"border: 1px;\n"
"border-radius: 5px}\n"
"QPushButton:focuspressed {background-color: rgba(255, 255, 255, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }\n"
" QPushButton:pressed {background-color: rgba(150, 150, 150, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }")
        self.k_5.setObjectName("k_5")
        self.Keyboard_layout.addWidget(self.k_5, 0, 4, 1, 1)
        self.k_5.clicked.connect(self.send_key_5)
        
        self.d = QtWidgets.QPushButton(Form)
        self.d.setMinimumSize(QtCore.QSize(40, 40))
        self.d.setStyleSheet("QPushButton { background-color: rgba(255, 255, 255, 255);\n"
"font: 12pt \"Ubuntu\";\n"
"border: 1px;\n"
"border-radius: 5px}\n"
"QPushButton:focuspressed {background-color: rgba(255, 255, 255, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }\n"
" QPushButton:pressed {background-color: rgba(150, 150, 150, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }")
        self.d.setObjectName("d")
        self.Keyboard_layout.addWidget(self.d, 2, 2, 1, 1)
        self.d.clicked.connect(self.send_key_d)
        
        self.l = QtWidgets.QPushButton(Form)
        self.l.setMinimumSize(QtCore.QSize(40, 40))
        self.l.setStyleSheet("QPushButton { background-color: rgba(255, 255, 255, 255);\n"
"font: 12pt \"Ubuntu\";\n"
"border: 1px;\n"
"border-radius: 5px}\n"
"QPushButton:focuspressed {background-color: rgba(255, 255, 255, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }\n"
" QPushButton:pressed {background-color: rgba(150, 150, 150, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }")
        self.l.setObjectName("l")
        self.Keyboard_layout.addWidget(self.l, 2, 8, 1, 1)
        self.l.clicked.connect(self.send_key_l)
        
        self.g = QtWidgets.QPushButton(Form)
        self.g.setMinimumSize(QtCore.QSize(40, 40))
        self.g.setStyleSheet("QPushButton { background-color: rgba(255, 255, 255, 255);\n"
"font: 12pt \"Ubuntu\";\n"
"border: 1px;\n"
"border-radius: 5px}\n"
"QPushButton:focuspressed {background-color: rgba(255, 255, 255, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }\n"
" QPushButton:pressed {background-color: rgba(150, 150, 150, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }")
        self.g.setObjectName("g")
        self.Keyboard_layout.addWidget(self.g, 2, 4, 1, 1)
        self.g.clicked.connect(self.send_key_g)
        
        self.f = QtWidgets.QPushButton(Form)
        self.f.setMinimumSize(QtCore.QSize(40, 40))
        self.f.setStyleSheet("QPushButton { background-color: rgba(255, 255, 255, 255);\n"
"font: 12pt \"Ubuntu\";\n"
"border: 1px;\n"
"border-radius: 5px}\n"
"QPushButton:focuspressed {background-color: rgba(255, 255, 255, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }\n"
" QPushButton:pressed {background-color: rgba(150, 150, 150, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }")
        self.f.setObjectName("f")
        self.Keyboard_layout.addWidget(self.f, 2, 3, 1, 1)
        self.f.clicked.connect(self.send_key_f)
        
        self.k_6 = QtWidgets.QPushButton(Form)
        self.k_6.setMinimumSize(QtCore.QSize(40, 40))
        self.k_6.setStyleSheet("QPushButton { background-color: rgba(255, 255, 255, 255);\n"
"font: 12pt \"Ubuntu\";\n"
"border: 1px;\n"
"border-radius: 5px}\n"
"QPushButton:focuspressed {background-color: rgba(255, 255, 255, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }\n"
" QPushButton:pressed {background-color: rgba(150, 150, 150, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }")
        self.k_6.setObjectName("k_6")
        self.Keyboard_layout.addWidget(self.k_6, 0, 5, 1, 1)
        self.k_6.clicked.connect(self.send_key_6)
        
        self.n = QtWidgets.QPushButton(Form)
        self.n.setMinimumSize(QtCore.QSize(40, 40))
        self.n.setStyleSheet("QPushButton { background-color: rgba(255, 255, 255, 255);\n"
"font: 12pt \"Ubuntu\";\n"
"border: 1px;\n"
"border-radius: 5px}\n"
"QPushButton:focuspressed {background-color: rgba(255, 255, 255, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }\n"
" QPushButton:pressed {background-color: rgba(150, 150, 150, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }")
        self.n.setObjectName("n")
        self.Keyboard_layout.addWidget(self.n, 3, 6, 1, 1)
        self.n.clicked.connect(self.send_key_n)
        
        
        self.backspace = QtWidgets.QPushButton(Form)
        self.backspace.setMinimumSize(QtCore.QSize(40, 40))
        self.backspace.setStyleSheet("QPushButton { background-color: rgba(255, 255, 255, 255);\n"
"font: 12pt \"Ubuntu\";\n"
"border: 1px;\n"
"border-radius: 5px}\n"
"QPushButton:focuspressed {background-color: rgba(255, 255, 255, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }\n"
" QPushButton:pressed {background-color: rgba(150, 150, 150, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }")
        self.backspace.setObjectName("backspace")
        self.Keyboard_layout.addWidget(self.backspace, 0, 10, 1, 1)
        self.backspace.clicked.connect(self.send_key_backspace)
        
        self.pushButton_32 = QtWidgets.QPushButton(Form)
        self.pushButton_32.setText("")
        self.pushButton_32.setFlat(True)
        self.pushButton_32.setObjectName("pushButton_32")
        self.Keyboard_layout.addWidget(self.pushButton_32, 2, 10, 1, 1)

        
        self.z = QtWidgets.QPushButton(Form)
        self.z.setMinimumSize(QtCore.QSize(40, 40))
        self.z.setStyleSheet("QPushButton { background-color: rgba(255, 255, 255, 255);\n"
"font: 12pt \"Ubuntu\";\n"
"border: 1px;\n"
"border-radius: 5px}\n"
"QPushButton:focuspressed {background-color: rgba(255, 255, 255, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }\n"
" QPushButton:pressed {background-color: rgba(150, 150, 150, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }")
        self.z.setObjectName("z")
        self.Keyboard_layout.addWidget(self.z, 3, 1, 1, 1)
        self.z.clicked.connect(self.send_key_z)
        
        self.k_3 = QtWidgets.QPushButton(Form)
        self.k_3.setMinimumSize(QtCore.QSize(40, 40))
        self.k_3.setStyleSheet("QPushButton { background-color: rgba(255, 255, 255, 255);\n"
"font: 12pt \"Ubuntu\";\n"
"border: 1px;\n"
"border-radius: 5px}\n"
"QPushButton:focuspressed {background-color: rgba(255, 255, 255, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }\n"
" QPushButton:pressed {background-color: rgba(150, 150, 150, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }")
        self.k_3.setObjectName("k_3")
        self.Keyboard_layout.addWidget(self.k_3, 0, 2, 1, 1)
        self.k_3.clicked.connect(self.send_key_3)
        
        self.p = QtWidgets.QPushButton(Form)
        self.p.setMinimumSize(QtCore.QSize(40, 40))
        self.p.setStyleSheet("QPushButton { background-color: rgba(255, 255, 255, 255);\n"
"font: 12pt \"Ubuntu\";\n"
"border: 1px;\n"
"border-radius: 5px}\n"
"QPushButton:focuspressed {background-color: rgba(255, 255, 255, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }\n"
" QPushButton:pressed {background-color: rgba(150, 150, 150, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }")
        self.p.setObjectName("p")
        self.Keyboard_layout.addWidget(self.p, 1, 9, 1, 1)
        self.p.clicked.connect(self.send_key_p)
        
        
        self.a = QtWidgets.QPushButton(Form)
        self.a.setMinimumSize(QtCore.QSize(40, 40))
        self.a.setStyleSheet("QPushButton { background-color: rgba(255, 255, 255, 255);\n"
"font: 12pt \"Ubuntu\";\n"
"border: 1px;\n"
"border-radius: 5px}\n"
"QPushButton:focuspressed {background-color: rgba(255, 255, 255, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }\n"
" QPushButton:pressed {background-color: rgba(150, 150, 150, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }")
        self.a.setObjectName("a")
        self.Keyboard_layout.addWidget(self.a, 2, 0, 1, 1)
        self.a.clicked.connect(self.send_key_a)
        

        
   # keyboard stop ----------------------------------------------------------------
   
   
   # status start  
   
        self.Main_buttons_layout = QtWidgets.QHBoxLayout()
        self.Main_buttons_layout.setObjectName("Main_buttons_layout")
        self.Status_button = QtWidgets.QPushButton(Form)
        self.Status_button.setMinimumSize(QtCore.QSize(40, 40))
        self.Status_button.setStyleSheet("QPushButton { background-color: rgba(255, 255, 255, 255);\n"
"font: 12pt \"Ubuntu\";\n"
"border: 1px;\n"
"border-radius: 5px}\n"
"QPushButton:focuspressed {background-color: rgba(255, 255, 255, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }\n"
" QPushButton:pressed {background-color: rgba(150, 150, 150, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }")
        self.Status_button.setObjectName("Status_button")
        self.Main_buttons_layout.addWidget(self.Status_button)
        self.Status_button.setIcon(QIcon("/home/" + user_login + "/CC_for_Dash/images/indicator.png"))
        self.Status_button.setIconSize(icon_size)
        self.Recent_button = QtWidgets.QPushButton(Form)
        self.Recent_button.setMinimumSize(QtCore.QSize(40, 40))
        self.Recent_button.setIcon(QIcon("/home/" + user_login + "/CC_for_Dash/images/history.png"))
        self.Recent_button.setIconSize(icon_size)        
        self.Recent_button.setStyleSheet("QPushButton { background-color: rgba(255, 255, 255, 255);\n"
"font: 12pt \"Ubuntu\";\n"
"border: 1px;\n"
"border-radius: 5px}\n"
"QPushButton:focuspressed {background-color: rgba(255, 255, 255, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }\n"
" QPushButton:pressed {background-color: rgba(150, 150, 150, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }")
        self.Recent_button.setObjectName("Recent_button")
        self.Main_buttons_layout.addWidget(self.Recent_button)
        self.Contacts_button = QtWidgets.QPushButton(Form)
        self.Contacts_button.setMinimumSize(QtCore.QSize(40, 40))
        self.Contacts_button.setIcon(QIcon("/home/" + user_login + "/CC_for_Dash/images/contacts.png"))
        self.Contacts_button.setIconSize(icon_size) 
        self.Contacts_button.setStyleSheet("QPushButton { background-color: rgba(255, 255, 255, 255);\n"
"font: 12pt \"Ubuntu\";\n"
"border: 1px;\n"
"border-radius: 5px}\n"
"QPushButton:focuspressed {background-color: rgba(255, 255, 255, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }\n"
" QPushButton:pressed {background-color: rgba(150, 150, 150, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"font: 12pt \"Ubuntu\";\n"
"color:black;\n"
"border: 0px; }")
        self.Contacts_button.setObjectName("Contacts_button")
        self.Main_buttons_layout.addWidget(self.Contacts_button)
        self.Main_layout.addLayout(self.Main_buttons_layout, 7, 0, 1, 1)
        
 # status stop ----------------------------------------------------------
 
  # settings start ------------------------------------------------------
  
        self.Settings_layout = QtWidgets.QHBoxLayout()
        self.Settings_layout.setObjectName("Settings_layout")
        spacerItem = QtWidgets.QSpacerItem(0, 0, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.Settings_layout.addItem(spacerItem)
        spacerItem1 = QtWidgets.QSpacerItem(0, 0, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.Settings_layout.addItem(spacerItem1)
        self.gridLayout_3 = QtWidgets.QGridLayout()
        self.gridLayout_3.setContentsMargins(0, -1, -1, -1)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.label_name = QtWidgets.QLabel(Form)
        self.label_name.setMinimumSize(QtCore.QSize(150, 90))
        self.label_name.setObjectName("label_name")
        self.label_name.setStyleSheet("color: rgb(255, 255, 255);")
        self.gridLayout_3.addWidget(self.label_name, 0, 0, 1, 1)
        self.label_mac = QtWidgets.QLabel(Form)
        self.label_mac.setMinimumSize(QtCore.QSize(150, 70))
        self.label_mac.setObjectName("label_mac")
        self.label_mac.setStyleSheet("color: rgb(255, 255, 255);")
        self.gridLayout_3.addWidget(self.label_mac, 1, 0, 1, 1)
        self.Sync_contacts = QtWidgets.QPushButton(Form)
        self.Sync_contacts.setMinimumSize(QtCore.QSize(0, 70))
        self.Sync_contacts.setStyleSheet("QPushButton { \n"
"    font: 14pt \"Ubuntu\";\n"
"    color: rgb(0, 0, 0);\n"
"    background-color: rgba(255, 255, 255, 255);\n"
"font: 14pt \"Ubuntu\";\n"
"border: 1px;\n"
"border-radius: 5px}\n"
"QPushButton:focuspressed {background-color: rgba(255, 255, 255, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"color:black;\n"
"border: 0px; }\n"
" QPushButton:pressed {background-color: rgba(150, 150, 150, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"color:black;\n"
"border: 0px; }")
        self.Sync_contacts.setFlat(True)
        self.Sync_contacts.setObjectName("Sync_contacts")
        self.gridLayout_3.addWidget(self.Sync_contacts, 3, 0, 1, 2)
        self.Mac_Label = QtWidgets.QLabel(Form)
        self.Mac_Label.setMinimumSize(QtCore.QSize(150, 0))
        self.Mac_Label.setObjectName("Mac_Label")
        self.gridLayout_3.addWidget(self.Mac_Label, 1, 1, 1, 1)
        self.Mac_Label.setStyleSheet("color: rgb(255, 255, 255);")
        self.Name_Label = QtWidgets.QLabel(Form)
        self.Name_Label.setMinimumSize(QtCore.QSize(150, 0))
        self.Name_Label.setStyleSheet("color: rgb(255, 255, 255);")
        self.Name_Label.setObjectName("Name_Label")
        self.gridLayout_3.addWidget(self.Name_Label, 0, 1, 1, 1)
        self.Path_Label = QtWidgets.QLabel(Form)
        self.Path_Label.setMinimumSize(QtCore.QSize(150, 0))
        self.Path_Label.setObjectName("Path_Label")
        self.Path_Label.setStyleSheet("color: rgb(255, 255, 255);")
        self.gridLayout_3.addWidget(self.Path_Label, 2, 1, 1, 1)
        self.label_path = QtWidgets.QLabel(Form)
        self.label_path.setMinimumSize(QtCore.QSize(150, 70))
        self.label_path.setObjectName("label_path")
        self.label_path.setStyleSheet("color: rgb(255, 255, 255);")
        self.gridLayout_3.addWidget(self.label_path, 2, 0, 1, 1)
        spacerItem2 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout_3.addItem(spacerItem2, 4, 0, 1, 1)
        self.Settings_layout.addLayout(self.gridLayout_3)
        spacerItem3 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.Settings_layout.addItem(spacerItem3)
        spacerItem4 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.Settings_layout.addItem(spacerItem4)
        
 # settings stop ----------------------------------------------------------------------------------        
 # search start ---------------------------------------------------------
 
        self.Search_text = QtWidgets.QHBoxLayout()
        self.Search_text.setContentsMargins(-1, 0, -1, -1)
        self.Search_text.setObjectName("Search_text")

        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.Search_text.addItem(spacerItem1)
        self.lineEdit = QtWidgets.QLineEdit(Form)
        self.lineEdit.setStyleSheet("color: rgb(255, 255, 255);\n"
"border: 1px solid grey;;")
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit.textChanged.connect(self.filterClicked)   
             
        self.Search_text.addWidget(self.lineEdit)
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.Search_text.addItem(spacerItem2)
        
 # search stop ------------------------------------------------------------

 # status labels start
  
        self.Info_layout = QtWidgets.QVBoxLayout()
        self.Info_layout.setContentsMargins(-1, 0, -1, -1)
        self.Info_layout.setObjectName("Info_layout")
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.Info_layout.addItem(spacerItem)
        self.Status_label = QtWidgets.QLabel(Form)
        self.Status_label.setMinimumSize(QtCore.QSize(0, 100))
        self.Status_label.setSizeIncrement(QtCore.QSize(0, 0))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.Status_label.setFont(font)
        self.Status_label.setAlignment(QtCore.Qt.AlignCenter)
        self.Status_label.setObjectName("Status_label")
        self.Status_label.setStyleSheet("color: rgb(255, 255, 255);")
        self.Info_layout.addWidget(self.Status_label)
        self.Number_label = QtWidgets.QLabel(Form)
        self.Number_label.setMinimumSize(QtCore.QSize(0, 100))
        font = QtGui.QFont()
        font.setPointSize(24)
        self.Number_label.setFont(font)
        self.Number_label.setAlignment(QtCore.Qt.AlignCenter)
        self.Number_label.setObjectName("Number_label")
        self.Number_label.setStyleSheet("color: rgb(255, 255, 255);")
        self.Info_layout.addWidget(self.Number_label)
        self.Name_label = QtWidgets.QLabel(Form)
        self.Name_label.setMinimumSize(QtCore.QSize(0, 100))
        self.Name_label.setStyleSheet("color: rgb(255, 255, 255);")
        font = QtGui.QFont()
        font.setPointSize(22)
        self.Name_label.setFont(font)
        self.Name_label.setAlignment(QtCore.Qt.AlignCenter)
        self.Name_label.setObjectName("Name_label")
        self.Info_layout.addWidget(self.Name_label)
        self.Name_label.setStyleSheet("color: rgb(255, 255, 255);")
        spacerItem1 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.Info_layout.addItem(spacerItem1)    
        


        # Lista  start--------------------------------------------------------
        
        self.Lista_layout = QtWidgets.QHBoxLayout()
        self.Lista_layout.setObjectName("Lista_recent_layout")
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.Lista_layout.addItem(spacerItem1)
        self.Lista = QtWidgets.QListView(Form)
        self.Lista.setMinimumSize(QtCore.QSize(500, 0))
        self.Lista.setObjectName("listView")
        self.Lista_layout.addWidget(self.Lista)
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.Lista_layout.addItem(spacerItem2)
    #    self.Main_layout.addLayout(self.Lista_recent_layout, 1, 0, 1, 1)
        self.gridLayout_2.addLayout(self.Main_layout, 0, 0, 1, 1)
        self.Lista.setStyleSheet("font: 15pt \"Ubuntu\";\n"
"    color: rgb(255, 255, 255);\n"
"background: transparent;\n"
"border-radius: 5px;\n"
"border: 1px solid grey;")     



        # Lista Contacts stop--------------------------------------------------------
        
 # Main buttons start        
        
                
        self.Call_buttons_layout = QtWidgets.QHBoxLayout()
        self.Call_buttons_layout.setContentsMargins(0, 0, -1, -1)
        self.Call_buttons_layout.setObjectName("Call_buttons_layout")
        
        
        self.Answer_button = QtWidgets.QPushButton(Form)
        self.Answer_button.setMinimumSize(QtCore.QSize(0, 60))
        self.Answer_button.setStyleSheet("QPushButton { \n"
"    color: rgb(255, 255, 255);\n"
"    background-color: rgb(38, 162, 105);\n"
"font: 14pt \"Ubuntu\";\n"
"border: 1px;\n"
"border-radius: 5px}\n"
"QPushButton:focuspressed {background-color: rgba(255, 255, 255, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"color:black;\n"
"border: 0px; }\n"
" QPushButton:pressed {background-color: rgba(150, 150, 150, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"color:black;\n"
"border: 0px; }")
        self.Answer_button.setObjectName("Answer_button")
        
        
        self.Call_buttons_layout.addWidget(self.Answer_button)
        self.Call_button = QtWidgets.QPushButton(Form)
        self.Call_button.setMinimumSize(QtCore.QSize(0, 60))
        self.Call_button.setStyleSheet("QPushButton { \n"
"    color: rgb(255, 255, 255);\n"
"    background-color: rgb(26, 95, 180);\n"
"font: 14pt \"Ubuntu\";\n"
"border: 1px;\n"
"border-radius: 5px}\n"
"QPushButton:focuspressed {background-color: rgba(255, 255, 255, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"color:black;\n"
"border: 0px; }\n"
" QPushButton:pressed {background-color: rgba(150, 150, 150, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"color:black;\n"
"border: 0px; }")
        self.Call_button.setObjectName("Call_button")
        self.Call_buttons_layout.addWidget(self.Call_button)
        
        
        
        self.Decline_button = QtWidgets.QPushButton(Form)
        self.Decline_button.setMinimumSize(QtCore.QSize(0, 60))
        self.Decline_button.setStyleSheet("QPushButton { \n"
"    background-color: rgb(246, 97, 81);\n"
"    \n"
"    color: rgb(255, 255, 255);\n"
"font: 15pt \"Ubuntu\";\n"
"border: 1px;\n"
"border-radius: 5px}\n"
"QPushButton:focuspressed {background-color: rgba(255, 255, 255, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"color:black;\n"
"border: 0px; }\n"
" QPushButton:pressed {background-color: rgba(150, 150, 150, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"color:black;\n"
"border: 0px; }")
        self.Decline_button.setObjectName("Decline_button")
        
        self.Keyboard_button = QtWidgets.QPushButton(Form)
        self.Keyboard_button.setMinimumSize(QtCore.QSize(0, 60))
        self.Keyboard_button.setStyleSheet("QPushButton { \n"
"    background-color: rgb(246, 97, 81);\n"
"    \n"
"    color: rgb(255, 255, 255);\n"
"font: 15pt \"Ubuntu\";\n"
"border: 1px;\n"
"border-radius: 5px}\n"
"QPushButton:focuspressed {background-color: rgba(255, 255, 255, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"color:black;\n"
"border: 0px; }\n"
" QPushButton:pressed {background-color: rgba(150, 150, 150, 255);\n"
"gridline-color: rgb(198, 70, 0);\n"
"color:black;\n"
"border: 0px; }")
        self.Keyboard_button.setObjectName("Decline_button")
        self.Keyboard_button.clicked.connect(self.Keyboard_show)                
        
        self.Call_buttons_layout.addWidget(self.Decline_button)
        self.Call_buttons_layout.addWidget(self.Keyboard_button)        
        
        self.Main_layout.addLayout(self.Call_buttons_layout, 6, 0, 1, 1)
        
        self.Lists_2_layout = QtWidgets.QHBoxLayout()
        self.Lists_2_layout.setContentsMargins(-1, 0, -1, -1)
        self.Lists_2_layout.setObjectName("Lists_2_layout")
        self.gridLayout_2.addLayout(self.Main_layout, 0, 0, 1, 1)


# End of import form mdi -------------------------------------------------------------

# Set name of buttons ------------------------------------------------------------

        self.Answer_button.setText("Answer")     
        self.Call_button.setText("Call")     
        self.Decline_button.setText("Decline")     
        
        self.Status_button.setText("Status")     
        self.Recent_button.setText("Recent")     
        self.Contacts_button.setText("Contacts")     
        self.Keyboard_button.setText("Keyboard")     
        self.Setting_button.setText("Settings")     
        
        self.k_1.setText("1") 
        self.k_2.setText("2")
        self.k_3.setText("3") 
        self.k_4.setText("4")          
        self.k_5.setText("5") 
        self.k_6.setText("6") 
        self.k_7.setText("7") 
        self.k_8.setText("8") 
        self.k_9.setText("9") 
        self.k_0.setText("0") 
        self.backspace.setText("<") 
        self.q.setText("q") 
        self.w.setText("w")
        self.e.setText("e") 
        self.r.setText("r")          
        self.t.setText("t") 
        self.y.setText("y") 
        self.u.setText("u") 
        self.i.setText("i") 
        self.o.setText("o") 
        self.p.setText("p") 

        self.a.setText("a") 
        self.s.setText("s")
        self.d.setText("d") 
        self.f.setText("f")          
        self.g.setText("g") 
        self.h.setText("h") 
        self.j.setText("j") 
        self.k.setText("k") 
        self.l.setText("l")
         
        self.z.setText("z")
        self.x.setText("x") 
        self.c.setText("c") 
        self.v.setText("v") 
        self.b.setText("b") 
        self.n.setText("n") 
        self.m.setText("m") 
        self.hide.setText("hide") 
        
        self.Sync_contacts.setText("Sync_contacts") 
         
        self.label_name.setText("Phone name:")  
        self.label_mac.setText("Mac:")  
        self.label_path.setText("When contacts sync:")  
                                
        
# hide/show layouts   test     
        
         
        self.Info_layout_widget=QWidget()
        self.Info_layout_widget.setLayout(self.Info_layout)
        self.Main_layout.addWidget(self.Info_layout_widget, 1, 0, 1, 1)

        self.Keyboard_layout_widget=QWidget()
        self.Keyboard_layout_widget.setLayout(self.Keyboard_layout)
        self.Main_layout.addWidget(self.Keyboard_layout_widget, 3, 0, 1, 1)

        self.Lista_layout_widget=QWidget()
        self.Lista_layout_widget.setLayout(self.Lista_layout)
        self.Main_layout.addWidget(self.Lista_layout_widget, 1, 0, 1, 1)
       
        self.Search_text_widget=QWidget()
        self.Search_text_widget.setLayout(self.Search_text)
        self.Main_layout.addWidget(self.Search_text_widget, 2, 0, 1, 1)

        self.Settings_layout_widget=QWidget()
        self.Settings_layout_widget.setLayout(self.Settings_layout)
        self.Main_layout.addWidget(self.Settings_layout_widget, 2, 0, 1, 1)
        
        
        self.Info_layout_widget.setHidden(False) #false/true /usuwa dodaje widget z info    
        self.Keyboard_layout_widget.setHidden(True) #false/true /usuwa dodaje widget z klawiatura    
        self.Lista_layout_widget.setHidden(True) #false/true /usuwa dodaje widget z lista    
        self.Search_text_widget.setHidden(True) #false/true /usuwa dodaje widget z search 
        self.Settings_layout_widget.setHidden(True) #false/true /usuwa dodaje widget z info    

# hide show buttons on start

        self.Call_button.hide()              
        self.Keyboard_button.hide()          
# Buttons connects

        self.Status_button.clicked.connect(self.Status)  
        self.Recent_button.clicked.connect(self.Recent)  
        self.Contacts_button.clicked.connect(self.Contacts)  
        self.Setting_button.clicked.connect(self.Settings)  
        
        self.Call_button.clicked.connect(self.Make_call)  
        self.Answer_button.clicked.connect(self.Answer_call)  
        self.Decline_button.clicked.connect(self.Decline_call)          
        
# methods

        self.timer = QTimer()
        self.timer.setInterval(50);
        self.timer.timeout.connect(self.Update_Status)
        self.timer.start()

# Show status when calling or not connected
    def Update_Status(self):
        PhoneDataExport.main()
        phone_data_export = PhoneDataExport.phone_data
    #    print(phone_data_export)
        status = phone_data_export['State']
        if (status != "No active calls"):
           self.Status()
        else:     
           self.Status_label.setText('No active calls') 
           self.Number_label.setText(' ') 
           self.Name_label.setText(' ')            
     
           self.Answer_button.hide()
           self.Decline_button.hide()
     #      self.Number_label.hide()           
     #      self.Name_label.hide()            
     #      self.Call_button.hide()              
     #      self.Keyboard_button.hide()


                   
    def Status(self):
        self.Keyboard_layout_widget.setHidden(True) #false/true /usuwa dodaje widget z klawiatura    
        self.Info_layout_widget.setHidden(False) #false/true /usuwa dodaje widget z info    
        self.Lista_layout_widget.setHidden(True) #false/true /usuwa dodaje widget z lista    
        self.Search_text_widget.setHidden(True) #false/true /usuwa dodaje widget z search            
        self.Settings_layout_widget.setHidden(True) #false/true /usuwa dodaje widget z info    
                         
        PhoneDataExport.main()
        phone_data_export = PhoneDataExport.phone_data
        name = ' ' 
        caller_found = ' '
        status = phone_data_export['State']
        number = phone_data_export['Number']
        path = phone_data_export['Path']
        serial = phone_data_export['Serial']    
        contacts_file_path = str("/home/" + user_login + "/.config/CallControl/" + serial + "/contacts_sorted.txt")
        search_number = str(number)
        if (status != "No active calls"):
                try:
                    with open(contacts_file_path, 'r') as searchfile:
                         found = False
                         for contact_id in searchfile:
                            if search_number in contact_id:
                               caller_found = contact_id.split(":", 1)[0]
                               found = True

                         if not found:
                            caller_found = "Unknow"
                except:     
                        print("History Error")  
                          
        if (status == "Not connected"):
            self.Answer_button.hide()
            self.Decline_button.hide()
            self.Number_label.hide()           
            self.Name_label.hide()           
            self.Call_button.hide()              
            self.Keyboard_button.hide()  
                    
        if (status == "No active calls"):
            self.Answer_button.hide()
            self.Decline_button.hide()
            self.Number_label.hide()           
            self.Name_label.hide()            
            self.Call_button.hide()              
            self.Keyboard_button.hide()  
                                    
        if (status == "dialing"):
            self.Answer_button.hide()
            self.Decline_button.show()
            self.Number_label.show() 
            self.Name_label.show()                 
            self.Call_button.hide()              
            self.Keyboard_button.hide()  
                                    
        if (status == "incoming"):
            self.Answer_button.hide()
            self.hang_button.hide()
            self.Decline_button.show()  
            self.Name_label.show()                        
            self.Call_button.hide()              
            self.Keyboard_button.hide()  
                        
        if (status == "active"):
            self.Answer_button.hide()
            self.Decline_button.show()  
            self.Number_label.show()
            self.Name_label.show()         
            self.Call_button.hide()              
            self.Keyboard_button.hide()  

        if (status == "No Phone found"):
            self.Answer_button.hide()
            self.Decline_button.hide()  
            self.Number_label.hide()
            self.Name_label.hide()         
            self.Call_button.hide()              
            self.Keyboard_button.hide()

                                   
        self.Status_label.setText(status) 
        self.Number_label.setText(caller_found) 
        self.Name_label.setText(number)         
        
    
    def Keyboard_show(self):    
        self.Keyboard_layout_widget.setHidden(False) #false/true /usuwa dodaje widget z klawiatura
        self.Search_text_widget.setHidden(False) #false/true /usuwa dodaje widget z search     
   



    def Settings(self):    
        self.Info_layout_widget.setHidden(True) #false/true /usuwa dodaje widget z info    
        self.Keyboard_layout_widget.setHidden(True) #false/true /usuwa dodaje widget z klawiatura    
        self.Lista_layout_widget.setHidden(True) #false/true /usuwa dodaje widget z lista    
        self.Search_text_widget.setHidden(True) #false/true /usuwa dodaje widget z search      
        self.Settings_layout_widget.setHidden(False) #false/true /usuwa dodaje widget z info    

        PhoneDataExport.main()
        phone_data_export = PhoneDataExport.phone_data
        name = phone_data_export['Phone']
        status = phone_data_export['State']
        number = phone_data_export['Number']
        path = phone_data_export['Path']
        serial = phone_data_export['Serial']         
        self.Name_Label.setText(name)           
        self.Mac_Label.setText(serial)  
                               
        if (status == "Not connected"):
           self.Sync_contacts.setText("")
        else:
          self.Sync_contacts.setText("Synchronize contacts")
          self.Sync_contacts.clicked.connect(self.Sync_contacts_run)
        self.contacts_sync_date = str("/home/" + user_login + "/.config/CallControl/" + serial + "/contacts_sync_date.txt")
        try:
             with open(self.contacts_sync_date) as f:
                  sync_date = f.read()
                  path = sync_date
                  self.Path_Label.setText(path) 
        except:
                 path = "Not downloaded"
                 self.Path_Label.setText(path)           
          
    def Sync_contacts_run(self):            
        PhoneDataExport.main()
        phone_data_export = PhoneDataExport.phone_data
        status = phone_data_export['State']
        serial = phone_data_export['Serial']
        contacts_sync_date = str("/home/" + user_login + "/.config/CallControl/" + serial + "/contacts_sync_date.txt")
        print(contacts_sync_date)
        if (status == "Not connected"):
           self.Sync_contacts.setText("Connect first")
        else:
          self.Sync_contacts.setText("Downloading...")
          checking = 1
          os.system('python3 PhoneBookDownload.py &' )
          
          time.sleep(1)
          while (checking == 1):
             path = contacts_sync_date
             check_file = str(os.path.isfile(path))
             print(check_file)

             print("checking")
             if (check_file == "True"):
                 self.Sync_contacts.setText("Downloaded")
                 checking = 0
                 try:
                     with open(self.contacts_sync_date) as f:
                          sync_date = f.read()
                          path = sync_date
                 except:
                          path = "Not downloaded"
                 self.Path_Label.setText(path)        

    def Recent(self):
        self.Info_layout_widget.setHidden(True) #false/true /usuwa dodaje widget z info    
        self.Keyboard_layout_widget.setHidden(True) #false/true /usuwa dodaje widget z klawiatura    
        self.Lista_layout_widget.setHidden(False) #false/true /usuwa dodaje widget z lista    
        self.Search_text_widget.setHidden(True) #false/true /usuwa dodaje widget z search 
        self.Settings_layout_widget.setHidden(True) #false/true /usuwa dodaje widget z info    
        
        self.Answer_button.hide() 
        self.Call_button.show()    
        self.Decline_button.hide()          
        self.Keyboard_button.hide()           
                    
        user_login = os.getlogin()

        PhoneDataExport.main()
        phone_data_export = PhoneDataExport.phone_data
        status = phone_data_export['State']
        if (status != "Not connected"):
           CallHistoryDownload.start()  
  
        CallHistoryDownload.start() 
        
        self.model = QStandardItemModel()
        self.Lista.setModel(self.model)
 
        self.Lista.clicked.connect(self.clicked_recent)
        self.Lista.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.Lista.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)  
        PhoneDataExport.main()
        phone_data_export = PhoneDataExport.phone_data
        serial = phone_data_export['Serial']   

        try:
            history_edited = str("/home/" + user_login + "/.config/CallControl/" + serial + "/call_history_edited.txt")
        except:
            print("No history list")  

        try:
                with open(history_edited) as f:
                        lines = f.readlines()
                for i in lines:
                        name = i.split('; ')[1].strip('\n')
                        number = i.split(': ')[1].split(';')[0]
                        direction = i.split('& ')[1].split(':')[0]
                        datetime = i.split('&')[0]
                        date_time = i.split('&')[0].split('T')[0]
                        d_y = datetime[0:4]
                        d_m = datetime[4:6]
                        d_d = datetime[6:8]
                        t_h = datetime[9:11]
                        t_m = datetime[11:13]
                        date = (d_d + "-" + d_m + "-" + d_y )
                        time = (t_h + ":" + t_m)

                        name_number = ( '				' + '\n' + '  ' + name + ': ' + number + '\n' + '			' + 'Time: ' + time + ' ' + date )

                        if (direction == "DIALED"):
             #           "/home/" + user_login + "/.config/CallControl/" + serial + "/contacts_sync_date.txt"
                            self.model.appendRow(QStandardItem(QIcon("/home/" + user_login + "/CC_for_Dash/images/phone-outgoing.png"), name_number ))
                        if (direction == "MISSED"):
                            self.model.appendRow(QStandardItem(QIcon("/home/" + user_login + "/CC_for_Dash/images/phone-missed.png"), name_number ))
                        if (direction == "RECEIVED"):
                            self.model.appendRow(QStandardItem(QIcon("/home/" + user_login + "/CC_for_Dash/images/phone-incoming.png"), name_number ))
                        if (direction == ""):
                            self.model.appendRow(QStandardItem(QIcon("/home/" + user_login + "/CC_for_Dash/images/phone-clock.png"), name_number ))

        except:
                print("Call History Error")         
         
        QScroller.grabGesture(self.Lista.viewport(), QScroller.LeftMouseButtonGesture )
        self.Lista.setVerticalScrollMode(QAbstractItemView.ScrollPerPixel)    



    def Contacts(self):
        self.Info_layout_widget.setHidden(True) #false/true /usuwa dodaje widget z info    
        self.Keyboard_layout_widget.setHidden(True) #false/true /usuwa dodaje widget z klawiatura    
        self.Lista_layout_widget.setHidden(False) #false/true /usuwa dodaje widget z lista    
        self.Search_text_widget.setHidden(True) #false/true /usuwa dodaje widget z search 
        self.Settings_layout_widget.setHidden(True) #false/true /usuwa dodaje widget z info    

        self.Answer_button.hide() 
        self.Call_button.show()  
        self.Decline_button.hide()           
        self.Keyboard_button.show()     
        
              
        self.model_contacts = QStandardItemModel()
        self.Lista.setModel(self.model_contacts)
        self.Lista.setObjectName("Contacts")
        
        self.Lista.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.Lista.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)        
        QScroller.grabGesture(self.Lista.viewport(), QScroller.LeftMouseButtonGesture )
               
        self.Lista.setVerticalScrollMode(QAbstractItemView.ScrollPerPixel) #add touch scrolling
        
        self.Lista.clicked.connect(self.clicked_contacts) # add touch smooth scrolling
        
        
        PhoneDataExport.main()
        phone_data_export = PhoneDataExport.phone_data
        serial = phone_data_export['Serial']    
        try:
            contacts_edited = str("/home/" + user_login + "/.config/CallControl/" + serial + "/contacts_sorted.txt")
        except:
            print("No contacts list")    
        try:
                with open(contacts_edited) as f:
                        lines = f.readlines()

                for i in lines:
                      #  i = i.strip('\n')
                        i  = ( '\n' + '	' + i )
                        self.model_contacts.appendRow(QStandardItem(QIcon("/home/" + user_login + "/CC_for_Dash/images/person.png"), i ))
        except:
                print("Call History Error")


      
    def clicked_contacts(self):
        ix = self.Lista.selectionModel().currentIndex()
        print(ix.data())
     #   self.Call_button.clicked.connect(self.wykonaj)

    def clicked_recent(self):
        ix = self.Lista.selectionModel().currentIndex()
        print(ix.data())
        ix = ' ' 
     #   self.Call_button.clicked.connect(self.wykonaj)        
                
#    def call_number(self):
#        print("wykonaj")
#        ix = self.Lista.selectionModel().currentIndex()
#        dial_number=str(ix.data())
#        print (dial_number)
#        s_dial_number= dial_number.rsplit(':')[1]
#        print (s_dial_number)        
#        os.system('python3 dial_number.py ' + s_dial_number)
                

    def Decline_call(self):
        PhoneDataExport.main()
        phone_data_export = PhoneDataExport.phone_data

        path = phone_data_export['Path']

        if (status == "dialing"):
          os.system("python3 " + "/home/" + user_login + "/CC_for_Dash/hangup-active")
          time.sleep(1)
        else:
          os.system("python3 " + "/home/" + user_login + "/CC_for_Dash/hangup-call " + path)
          time.sleep(1)
               
    def Answer_call(self):
        os.system("python3 " + "/home/" + user_login + "/CC_for_Dash/answer-calls")
        time.sleep(1)
                

    def Make_call(self):
        print("wykonaj")
        ix = self.Lista.selectionModel().currentIndex()
        dial_number=str(ix.data())
        print (dial_number)
        s_dial_number= dial_number.rsplit(': ')[1].strip('Time')
        print ("s_dial_number")                
        print (s_dial_number)        
        os.system("python3 " + "/home/" + user_login + "/CC_for_Dash/dial_number.py " + s_dial_number)
        
                        
         #setHidden

 #       Keyboard_frame = QtWidgets.QFrame()
 #       Keyboard_frame.setLayout(self.Keyboard_layout)
 #     #  self.Main_layout.addWidget(Keyboard_frame)
 #       time.sleep(1)
 #       Keyboard_frame.hide()
 #       time.sleep(1)
 #       Keyboard_frame.show()
 #       time.sleep(1)
 #       Keyboard_frame.hide()
 #       time.sleep(1)
 #       Keyboard_frame.show()

    def send_key_q(self):
        self.lineEdit.setText(self.lineEdit.text() +  'q')

    def send_key_w(self):
        self.lineEdit.setText(self.lineEdit.text() +  'w')
        
    def send_key_e(self):
        self.lineEdit.setText(self.lineEdit.text() +  'e')     
        
    def send_key_r(self):
        self.lineEdit.setText(self.lineEdit.text() +  'r')

    def send_key_t(self):
        self.lineEdit.setText(self.lineEdit.text() +  't')
        
    def send_key_y(self):
        self.lineEdit.setText(self.lineEdit.text() +  'y')     

    def send_key_u(self):
        self.lineEdit.setText(self.lineEdit.text() +  'u')
        
    def send_key_i(self):
        self.lineEdit.setText(self.lineEdit.text() +  'i')

    def send_key_o(self):
        self.lineEdit.setText(self.lineEdit.text() +  'o')
        
    def send_key_p(self):
        self.lineEdit.setText(self.lineEdit.text() +  'p')     

    def send_key_a(self):
        self.lineEdit.setText(self.lineEdit.text() +  'a')
        
    def send_key_s(self):
        self.lineEdit.setText(self.lineEdit.text() +  's')

    def send_key_d(self):
        self.lineEdit.setText(self.lineEdit.text() +  'd')
        
    def send_key_f(self):
        self.lineEdit.setText(self.lineEdit.text() +  'f')     

    def send_key_g(self):
        self.lineEdit.setText(self.lineEdit.text() +   'g')                      

    def send_key_h(self):
        self.lineEdit.setText(self.lineEdit.text() +  'h')

    def send_key_j(self):
        self.lineEdit.setText(self.lineEdit.text() +  'j')
        
    def send_key_k(self):
        self.lineEdit.setText(self.lineEdit.text() +  'k')     

    def send_key_l(self):
        self.lineEdit.setText(self.lineEdit.text() +  'l')
        
    def send_key_z(self):
        self.lineEdit.setText(self.lineEdit.text() +  'z')

    def send_key_x(self):
        self.lineEdit.setText(self.lineEdit.text() +  'x')
        
    def send_key_c(self):
        self.lineEdit.setText(self.lineEdit.text() +  'c')     

    def send_key_v(self):
        self.lineEdit.setText(self.lineEdit.text() +  'v')
        
    def send_key_b(self):
        self.lineEdit.setText(self.lineEdit.text() +  'b')

    def send_key_n(self):
        self.lineEdit.setText(self.lineEdit.text() +  'n')
        
    def send_key_m(self):
        self.lineEdit.setText(self.lineEdit.text() +  'm')     

    def send_key_1(self):
        self.lineEdit.setText(self.lineEdit.text() +  '1')
        
    def send_key_2(self):
        self.lineEdit.setText(self.lineEdit.text() +  '2')

    def send_key_3(self):
        self.lineEdit.setText(self.lineEdit.text() +  '3')
        
    def send_key_4(self):
        self.lineEdit.setText(self.lineEdit.text() +  '4')     

    def send_key_5(self):
        self.lineEdit.setText(self.lineEdit.text() +   '5') 
        
    def send_key_6(self):
        self.lineEdit.setText(self.lineEdit.text() +  '6')

    def send_key_7(self):
        self.lineEdit.setText(self.lineEdit.text() +  '7')
        
    def send_key_8(self):
        self.lineEdit.setText(self.lineEdit.text() +  '8')     

    def send_key_9(self):
        self.lineEdit.setText(self.lineEdit.text() +  '9')
        
    def send_key_0(self):
        self.lineEdit.setText(self.lineEdit.text() +  '0')

    def send_key_space(self):
        self.lineEdit.setText(self.lineEdit.text() +  ' ')
               
    def send_key_backspace(self):
        text = self.lineEdit.text()
        textLength = len(text)
        if(textLength):
            newtext = text[:textLength - 1]
            self.lineEdit.setText(newtext)

    def filterClicked(self):
        filter_text = str(self.lineEdit.text()).lower()
        for row in range(self.model_contacts.rowCount()):
            if filter_text in str(self.model_contacts.item(row).text()).lower():
                self.Lista.setRowHidden(row, False)
            else:
                self.Lista.setRowHidden(row, True)
                
                
    def send_key_hide(self):
        self.Keyboard_layout_widget.setHidden(True) #false/true /usuwa dodaje widget z klawiatura    
        self.Search_text_widget.setHidden(True) #false/true /usuwa dodaje widget z search   
        self.lineEdit.setText('') #clear search          
        
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    ui = Ui_Form()
    ui.setupUi(Form)
    Form.show()
    
    sys.exit(app.exec_())
